class StationLumineuse
!!!139306.cpp!!!	restaurerEtats() : void
    char cle[64] = "";

    // pour les modules Poubelle
    Poubelle* poubelle = nullptr;
    for(int i = 1; i <= getNbPoubelles(); ++i)
    {
        poubelle = getPoubelle(i);
        if(poubelle == nullptr)
        {
            continue;
        }
        sprintf((char*)cle, "%s%d", "notif_p", i);
        poubelle->setEtatNotification(preferences.getBool(cle, false));
        sprintf((char*)cle, "%s%d", "actif_p", i);
        poubelle->setActivation(preferences.getBool(cle, false));
        restaurerCouleurPoubelle(i);
        if(poubelle->getActivation())
        {
            if(poubelle->getEtatNotification())
            {
                poubelle->allumerNotification();
            }
            else
            {
                poubelle->eteindreNotification();
            }
        }
        else
        {
            poubelle->eteindreNotification();
        }
    }

    // Restaurer les états des modules Boite
    Boite* boite = nullptr;
    for(int i = 1; i <= getNbBoites(); i++)
    {
        boite = getBoite(i);
        if(boite == nullptr)
        {
            continue;
        }
        sprintf((char*)cle, "%s%d", "notif_b", i);
        boite->setEtatNotification(preferences.getBool(cle, false));
        sprintf((char*)cle, "%s%d", "actif_b", i);
        boite->setActivation(preferences.getBool(cle, false));
        restaurerCouleurBoite(i);
        if(boite->getActivation())
        {
            if(boite->getEtatNotification())
            {
                boite->allumerNotification();
            }
            else
            {
                boite->eteindreNotification();
            }
        }
        else
        {
            boite->eteindreNotification();
        }
    }

    // Restaurer les états des modules Machine
    Machine* machine = nullptr;
    for(int i = 1; i <= getNbMachines(); i++)
    {
        machine = getMachine(i);
        if(machine == nullptr)
        {
            continue;
        }
        sprintf((char*)cle, "%s%d", "notif_m", i);
        machine->setEtatNotification(preferences.getBool(cle, false));
        sprintf((char*)cle, "%s%d", "actif_m", i);
        machine->setActivation(preferences.getBool(cle, false));
        restaurerCouleurMachine(i);
        if(machine->getActivation())
        {
            if(machine->getEtatNotification())
            {
                machine->allumerNotification();
            }
            else
            {
                machine->eteindreNotification();
            }
        }
        else
        {
            machine->eteindreNotification();
        }
    }
!!!139434.cpp!!!	sauvegarderCouleurPoubelle(in id : int) : void
    if(id < 1 || id > poubelles.size() || poubelles[id - 1] == nullptr)
    {
        return;
    }
    char cle[64] = "";
    sprintf(cle, "couleur_p%d", id);
    preferences.putString(cle, poubelles[id - 1]->getCouleur());
!!!139562.cpp!!!	restaurerCouleurPoubelle(in id : int) : void
    if(id < 1 || id > poubelles.size() || poubelles[id - 1] == nullptr)
    {
        return;
    }

    char cle[64] = "";
    sprintf((char*)cle, "%s%d", "couleur_p", id);
    Poubelle* poubelle = getPoubelle(id);
    poubelle->setCouleurLed(
      preferences.getString(cle, StationLumineuse::getCouleurToString(couleursPoubelles[id])));
!!!139690.cpp!!!	sauvegarderCouleurBoite(in id : int) : void
    if(id < 1 || id > boites.size() || boites[id - 1] == nullptr)
    {
        return;
    }
    char cle[64] = "";
    sprintf(cle, "couleur_b%d", id);
    preferences.putString(cle, boites[id - 1]->getCouleur());
!!!139818.cpp!!!	restaurerCouleurBoite(in id : int) : void
    if(id < 1 || id > boites.size() || boites[id - 1] == nullptr)
    {
        return;
    }
    char cle[64] = "";
    sprintf(cle, "couleur_b%d", id);
    Boite* boite = getBoite(id);
    boite->setCouleurLed(
      preferences.getString(cle, StationLumineuse::getCouleurToString(leds.Color(255, 0, 0))));
!!!139946.cpp!!!	sauvegarderCouleurMachine(in id : int) : void
    if(id < 1 || id > machines.size() || machines[id - 1] == nullptr)
    {
        return;
    }
    char cle[64] = "";
    sprintf(cle, "couleur_m%d", id);
    preferences.putString(cle, machines[id - 1]->getCouleur());
!!!140074.cpp!!!	restaurerCouleurMachine(in id : int) : void
    if(id < 1 || id > machines.size() || machines[id - 1] == nullptr)
    {
        return;
    }
    char cle[64] = "";
    sprintf(cle, "couleur_m%d", id);
    Machine* machine = getMachine(id);
    machine->setCouleurLed(
      preferences.getString(cle, StationLumineuse::getCouleurToString(leds.Color(0, 255, 0))));
!!!130199.cpp!!!	StationLumineuse()
    // les machines
    for(int i = 0; i < NB_LEDS_NOTIFICATION_MACHINES; ++i)
    {
        // couleur par défaut verte
        machines.push_back(new Machine(i + 1, i, leds.Color(0, 255, 0), leds));
    }

    // les poubelles
    for(int i = 0; i < NB_LEDS_NOTIFICATION_POUBELLES; ++i)
    {
        poubelles.push_back(new Poubelle(i + 1, i, couleursPoubelles[i], leds));
    }

    // les boîtes aux lettres
    for(int i = 0; i < NB_LEDS_NOTIFICATION_BOITE; ++i)
    {
        // couleur par défaut rouge
        boites.push_back(new Boite(i + 1, i, leds.Color(255, 0, 0), leds));
    }
!!!130327.cpp!!!	demarrer() : void
    // pour la sauvegarde
    preferences.begin("eeprom", false); // false pour r/w

#ifdef DEBUG_STATION_LUMINEUSE
    Serial.println(F("StationLumineuse::demarrer()"));
    Serial.println(F("  Modules"));
    Serial.print(F("    Nb machines  : "));
    Serial.println(machines.size());
    Serial.print(F("    Nb poubelles : "));
    Serial.println(poubelles.size());
    Serial.print(F("    Nb boites    : "));
    Serial.println(boites.size());
#endif

    leds.begin();

#ifdef DEBUG_STATION_LUMINEUSE
    Serial.println(F("  Bandeau initialisé"));
    Serial.print(F("    Broche        : "));
    Serial.println(leds.getPin());
    Serial.print(F("    Nb leds       : "));
    Serial.println(leds.numPixels());
    Serial.print(F("    Peut afficher : "));
    Serial.println((leds.canShow() ? "oui" : "non"));
#endif

    restaurerEtats();

    serveurWeb->demarrer();
!!!130455.cpp!!!	traiterRequetes() : void
    serveurWeb->traiterRequetes();
!!!140202.cpp!!!	testerBandeau() : void
    // Allume les leds de notification de tous les modules
    for(int i = 0; i < NB_LEDS_NOTIFICATION_MACHINES; ++i)
    {
        machines[i]->allumerNotification();
    }
    for(int i = 0; i < NB_LEDS_NOTIFICATION_POUBELLES; ++i)
    {
        poubelles[i]->allumerNotification();
    }
    for(int i = 0; i < NB_LEDS_NOTIFICATION_BOITE; ++i)
    {
        boites[i]->allumerNotification();
    }

    // Attente
    delay(TEST_TEMPORISATION);

    // Eteint les leds de notification de tous les modules
    for(int i = 0; i < NB_LEDS_NOTIFICATION_MACHINES; ++i)
    {
        machines[i]->eteindreNotification();
    }
    for(int i = 0; i < NB_LEDS_NOTIFICATION_POUBELLES; ++i)
    {
        poubelles[i]->eteindreNotification();
    }
    for(int i = 0; i < NB_LEDS_NOTIFICATION_BOITE; ++i)
    {
        boites[i]->eteindreNotification();
    }
!!!140330.cpp!!!	convertirCouleurRGB(in r : uint8_t, in g : uint8_t, in b : uint8_t) : uint32_t
    return ((uint32_t)r << 16) | ((uint32_t)g << 8) | b;
!!!140458.cpp!!!	getCouleurToString(in couleur : uint32_t) : String
    std::stringstream couleurStream;

    // #RRGGBB
    couleurStream << std::setfill('0') << std::setw(2) << std::hex << ((couleur >> 16) & 0xff);
    couleurStream << std::setfill('0') << std::setw(2) << std::hex << ((couleur >> 8) & 0xff);
    couleurStream << std::setfill('0') << std::setw(2) << std::hex << (couleur & 0xff);

    return String("#") + String(couleurStream.str().c_str());
!!!140586.cpp!!!	getCouleurToRGB(in couleur : String) : uint32_t
    if(couleur[0] == '#' && couleur.length() == 7)
    {
        uint32_t c;
        couleur.remove(0, 1);
        std::stringstream(couleur.c_str()) >> std::hex >> c;
        return c;
    }
    return 0;
!!!140714.cpp!!!	getNbPoubelles() : std::size_t
    return poubelles.size();
!!!140842.cpp!!!	getPoubelle(in id : int) : Poubelle
    // id valide ?
    if(id < 1 || id > poubelles.size() || poubelles[id - 1] == nullptr)
    {
        return nullptr;
    }
    return poubelles[id - 1];
!!!140970.cpp!!!	sauvegarderEtatsPoubelle(in id : int) : void
    // id valide ?
    if(id < 1 || id > poubelles.size() || poubelles[id - 1] == nullptr)
    {
        return;
    }
    char cle[64] = "";

    // sauvegarde les deux états pour cet id
    sprintf((char*)cle, "%s%d", "notif_p", id);
    preferences.putBool(cle, poubelles[id - 1]->getEtatNotification());
    sprintf((char*)cle, "%s%d", "actif_p", id);
    preferences.putBool(cle, poubelles[id - 1]->getActivation());
    sauvegarderCouleurPoubelle(id);
!!!141098.cpp!!!	getNbBoites() : std::size_t
    return boites.size();
!!!141226.cpp!!!	getBoite(in id : int) : Boite
    if(id < 1 || id > boites.size() || boites[id - 1] == nullptr)
    {
        return nullptr;
    }
    return boites[id - 1];
!!!141354.cpp!!!	sauvegarderEtatsBoite(in id : int) : void
    // id valide ?
    if(id < 1 || id > boites.size() || boites[id - 1] == nullptr)
    {
        return;
    }
    char cle[64] = "";

    // sauvegarde les deux états pour cet id
    sprintf((char*)cle, "%s%d", "notif_b", id);
    preferences.putBool(cle, boites[id - 1]->getEtatNotification());
    sprintf((char*)cle, "%s%d", "actif_b", id);
    preferences.putBool(cle, boites[id - 1]->getActivation());
    sauvegarderCouleurBoite(id);
!!!141482.cpp!!!	getNbMachines() : std::size_t
    return machines.size();
!!!141610.cpp!!!	getMachine(in id : int) : Machine
    if(id < 1 || id > machines.size() || machines[id - 1] == nullptr)
    {
        return nullptr;
    }
    return machines[id - 1];
!!!141738.cpp!!!	sauvegarderEtatsMachine(in id : int) : void
    // id valide ?
    if(id < 1 || id > machines.size() || machines[id - 1] == nullptr)
    {
        return;
    }
    char cle[64] = "";

    // sauvegarde les deux états pour cet id
    sprintf((char*)cle, "%s%d", "notif_m", id);
    preferences.putBool(cle, machines[id - 1]->getEtatNotification());
    sprintf((char*)cle, "%s%d", "actif_m", id);
    preferences.putBool(cle, machines[id - 1]->getActivation());
    sauvegarderCouleurMachine(id);
